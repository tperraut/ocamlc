State 0:
prog' -> . prog [ # ]
-- On WHILE shift to state 1
-- On VAR shift to state 51
-- On PRINT shift to state 57
-- On NOT shift to state 2
-- On NEWLINE shift to state 60
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 62
-- On FOR shift to state 66
-- On EXIT shift to state 73
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On BEGIN shift to state 50
-- On prog shift to state 88
-- On list(instr) shift to state 89
-- On instr shift to state 77
-- On expr shift to state 79
-- On const shift to state 28
-- On block shift to state 86
-- On EOF reduce production list(instr) -> 

State 1:
instr -> WHILE . expr block [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 49
-- On const shift to state 28

State 2:
expr -> NOT . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 48
-- On const shift to state 28

State 3:
expr -> MINUS . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 47
-- On const shift to state 28

State 4:
expr -> LSPAREN . expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 45
-- On const shift to state 28

State 5:
expr -> LPAREN . expr RPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 43
-- On const shift to state 28

State 6:
expr -> IF . expr THEN expr ELSE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 10
-- On const shift to state 28

State 7:
expr -> IDENT . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On TO reduce production expr -> IDENT 
-- On THEN reduce production expr -> IDENT 
-- On SEMI reduce production expr -> IDENT 
-- On RSPAREN reduce production expr -> IDENT 
-- On RPAREN reduce production expr -> IDENT 
-- On PLUS reduce production expr -> IDENT 
-- On OR reduce production expr -> IDENT 
-- On NEQ reduce production expr -> IDENT 
-- On MULT reduce production expr -> IDENT 
-- On MINUS reduce production expr -> IDENT 
-- On LT reduce production expr -> IDENT 
-- On LSPAREN reduce production expr -> IDENT 
-- On LE reduce production expr -> IDENT 
-- On GT reduce production expr -> IDENT 
-- On GE reduce production expr -> IDENT 
-- On EQ reduce production expr -> IDENT 
-- On ELSE reduce production expr -> IDENT 
-- On DIV reduce production expr -> IDENT 
-- On BEGIN reduce production expr -> IDENT 
-- On AND reduce production expr -> IDENT 

State 8:
const -> CONST_INT . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On TO reduce production const -> CONST_INT 
-- On THEN reduce production const -> CONST_INT 
-- On SEMI reduce production const -> CONST_INT 
-- On RSPAREN reduce production const -> CONST_INT 
-- On RPAREN reduce production const -> CONST_INT 
-- On PLUS reduce production const -> CONST_INT 
-- On OR reduce production const -> CONST_INT 
-- On NEQ reduce production const -> CONST_INT 
-- On MULT reduce production const -> CONST_INT 
-- On MINUS reduce production const -> CONST_INT 
-- On LT reduce production const -> CONST_INT 
-- On LSPAREN reduce production const -> CONST_INT 
-- On LE reduce production const -> CONST_INT 
-- On GT reduce production const -> CONST_INT 
-- On GE reduce production const -> CONST_INT 
-- On EQ reduce production const -> CONST_INT 
-- On ELSE reduce production const -> CONST_INT 
-- On DIV reduce production const -> CONST_INT 
-- On BEGIN reduce production const -> CONST_INT 
-- On AND reduce production const -> CONST_INT 

State 9:
const -> CONST_BOOL . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On TO reduce production const -> CONST_BOOL 
-- On THEN reduce production const -> CONST_BOOL 
-- On SEMI reduce production const -> CONST_BOOL 
-- On RSPAREN reduce production const -> CONST_BOOL 
-- On RPAREN reduce production const -> CONST_BOOL 
-- On PLUS reduce production const -> CONST_BOOL 
-- On OR reduce production const -> CONST_BOOL 
-- On NEQ reduce production const -> CONST_BOOL 
-- On MULT reduce production const -> CONST_BOOL 
-- On MINUS reduce production const -> CONST_BOOL 
-- On LT reduce production const -> CONST_BOOL 
-- On LSPAREN reduce production const -> CONST_BOOL 
-- On LE reduce production const -> CONST_BOOL 
-- On GT reduce production const -> CONST_BOOL 
-- On GE reduce production const -> CONST_BOOL 
-- On EQ reduce production const -> CONST_BOOL 
-- On ELSE reduce production const -> CONST_BOOL 
-- On DIV reduce production const -> CONST_BOOL 
-- On BEGIN reduce production const -> CONST_BOOL 
-- On AND reduce production const -> CONST_BOOL 

State 10:
expr -> expr . LSPAREN expr RSPAREN [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ THEN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> IF expr . THEN expr ELSE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On THEN shift to state 11
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 11:
expr -> IF expr THEN . expr ELSE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 12
-- On const shift to state 28

State 12:
expr -> expr . LSPAREN expr RSPAREN [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . PLUS expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . MINUS expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . MULT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . DIV expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . AND expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . OR expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . EQ expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . NEQ expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . LT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . LE expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . GT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> expr . GE expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV AND ]
expr -> IF expr THEN expr . ELSE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On ELSE shift to state 41
-- On DIV shift to state 26
-- On AND shift to state 39

State 13:
expr -> expr PLUS . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 14
-- On const shift to state 28

State 14:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr PLUS expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On MULT shift to state 15
-- On LSPAREN shift to state 17
-- On DIV shift to state 26
-- On TO reduce production expr -> expr PLUS expr 
-- On THEN reduce production expr -> expr PLUS expr 
-- On SEMI reduce production expr -> expr PLUS expr 
-- On RSPAREN reduce production expr -> expr PLUS expr 
-- On RPAREN reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On OR reduce production expr -> expr PLUS expr 
-- On NEQ reduce production expr -> expr PLUS expr 
-- On MINUS reduce production expr -> expr PLUS expr 
-- On LT reduce production expr -> expr PLUS expr 
-- On LE reduce production expr -> expr PLUS expr 
-- On GT reduce production expr -> expr PLUS expr 
-- On GE reduce production expr -> expr PLUS expr 
-- On EQ reduce production expr -> expr PLUS expr 
-- On ELSE reduce production expr -> expr PLUS expr 
-- On BEGIN reduce production expr -> expr PLUS expr 
-- On AND reduce production expr -> expr PLUS expr 

State 15:
expr -> expr MULT . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 16
-- On const shift to state 28

State 16:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr MULT expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On LSPAREN shift to state 17
-- On TO reduce production expr -> expr MULT expr 
-- On THEN reduce production expr -> expr MULT expr 
-- On SEMI reduce production expr -> expr MULT expr 
-- On RSPAREN reduce production expr -> expr MULT expr 
-- On RPAREN reduce production expr -> expr MULT expr 
-- On PLUS reduce production expr -> expr MULT expr 
-- On OR reduce production expr -> expr MULT expr 
-- On NEQ reduce production expr -> expr MULT expr 
-- On MULT reduce production expr -> expr MULT expr 
-- On MINUS reduce production expr -> expr MULT expr 
-- On LT reduce production expr -> expr MULT expr 
-- On LE reduce production expr -> expr MULT expr 
-- On GT reduce production expr -> expr MULT expr 
-- On GE reduce production expr -> expr MULT expr 
-- On EQ reduce production expr -> expr MULT expr 
-- On ELSE reduce production expr -> expr MULT expr 
-- On DIV reduce production expr -> expr MULT expr 
-- On BEGIN reduce production expr -> expr MULT expr 
-- On AND reduce production expr -> expr MULT expr 

State 17:
expr -> expr LSPAREN . expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 18
-- On const shift to state 28

State 18:
expr -> expr . LSPAREN expr RSPAREN [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr LSPAREN expr . RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
-- On RSPAREN shift to state 19
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 19:
expr -> expr LSPAREN expr RSPAREN . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On TO reduce production expr -> expr LSPAREN expr RSPAREN 
-- On THEN reduce production expr -> expr LSPAREN expr RSPAREN 
-- On SEMI reduce production expr -> expr LSPAREN expr RSPAREN 
-- On RSPAREN reduce production expr -> expr LSPAREN expr RSPAREN 
-- On RPAREN reduce production expr -> expr LSPAREN expr RSPAREN 
-- On PLUS reduce production expr -> expr LSPAREN expr RSPAREN 
-- On OR reduce production expr -> expr LSPAREN expr RSPAREN 
-- On NEQ reduce production expr -> expr LSPAREN expr RSPAREN 
-- On MULT reduce production expr -> expr LSPAREN expr RSPAREN 
-- On MINUS reduce production expr -> expr LSPAREN expr RSPAREN 
-- On LT reduce production expr -> expr LSPAREN expr RSPAREN 
-- On LSPAREN reduce production expr -> expr LSPAREN expr RSPAREN 
-- On LE reduce production expr -> expr LSPAREN expr RSPAREN 
-- On GT reduce production expr -> expr LSPAREN expr RSPAREN 
-- On GE reduce production expr -> expr LSPAREN expr RSPAREN 
-- On EQ reduce production expr -> expr LSPAREN expr RSPAREN 
-- On ELSE reduce production expr -> expr LSPAREN expr RSPAREN 
-- On DIV reduce production expr -> expr LSPAREN expr RSPAREN 
-- On BEGIN reduce production expr -> expr LSPAREN expr RSPAREN 
-- On AND reduce production expr -> expr LSPAREN expr RSPAREN 

State 20:
expr -> expr OR . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 21
-- On const shift to state 28

State 21:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr OR expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39
-- On TO reduce production expr -> expr OR expr 
-- On THEN reduce production expr -> expr OR expr 
-- On SEMI reduce production expr -> expr OR expr 
-- On RSPAREN reduce production expr -> expr OR expr 
-- On RPAREN reduce production expr -> expr OR expr 
-- On OR reduce production expr -> expr OR expr 
-- On ELSE reduce production expr -> expr OR expr 
-- On BEGIN reduce production expr -> expr OR expr 

State 22:
expr -> expr NEQ . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 23
-- On const shift to state 28

State 23:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr NEQ expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LSPAREN shift to state 17
-- On DIV shift to state 26
-- On TO reduce production expr -> expr NEQ expr 
-- On THEN reduce production expr -> expr NEQ expr 
-- On SEMI reduce production expr -> expr NEQ expr 
-- On RSPAREN reduce production expr -> expr NEQ expr 
-- On RPAREN reduce production expr -> expr NEQ expr 
-- On OR reduce production expr -> expr NEQ expr 
-- On NEQ reduce production expr -> expr NEQ expr 
-- On LT reduce production expr -> expr NEQ expr 
-- On LE reduce production expr -> expr NEQ expr 
-- On GT reduce production expr -> expr NEQ expr 
-- On GE reduce production expr -> expr NEQ expr 
-- On EQ reduce production expr -> expr NEQ expr 
-- On ELSE reduce production expr -> expr NEQ expr 
-- On BEGIN reduce production expr -> expr NEQ expr 
-- On AND reduce production expr -> expr NEQ expr 

State 24:
expr -> expr MINUS . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 25
-- On const shift to state 28

State 25:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr MINUS expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On MULT shift to state 15
-- On LSPAREN shift to state 17
-- On DIV shift to state 26
-- On TO reduce production expr -> expr MINUS expr 
-- On THEN reduce production expr -> expr MINUS expr 
-- On SEMI reduce production expr -> expr MINUS expr 
-- On RSPAREN reduce production expr -> expr MINUS expr 
-- On RPAREN reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On OR reduce production expr -> expr MINUS expr 
-- On NEQ reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On LT reduce production expr -> expr MINUS expr 
-- On LE reduce production expr -> expr MINUS expr 
-- On GT reduce production expr -> expr MINUS expr 
-- On GE reduce production expr -> expr MINUS expr 
-- On EQ reduce production expr -> expr MINUS expr 
-- On ELSE reduce production expr -> expr MINUS expr 
-- On BEGIN reduce production expr -> expr MINUS expr 
-- On AND reduce production expr -> expr MINUS expr 

State 26:
expr -> expr DIV . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 27
-- On const shift to state 28

State 27:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr DIV expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On LSPAREN shift to state 17
-- On TO reduce production expr -> expr DIV expr 
-- On THEN reduce production expr -> expr DIV expr 
-- On SEMI reduce production expr -> expr DIV expr 
-- On RSPAREN reduce production expr -> expr DIV expr 
-- On RPAREN reduce production expr -> expr DIV expr 
-- On PLUS reduce production expr -> expr DIV expr 
-- On OR reduce production expr -> expr DIV expr 
-- On NEQ reduce production expr -> expr DIV expr 
-- On MULT reduce production expr -> expr DIV expr 
-- On MINUS reduce production expr -> expr DIV expr 
-- On LT reduce production expr -> expr DIV expr 
-- On LE reduce production expr -> expr DIV expr 
-- On GT reduce production expr -> expr DIV expr 
-- On GE reduce production expr -> expr DIV expr 
-- On EQ reduce production expr -> expr DIV expr 
-- On ELSE reduce production expr -> expr DIV expr 
-- On DIV reduce production expr -> expr DIV expr 
-- On BEGIN reduce production expr -> expr DIV expr 
-- On AND reduce production expr -> expr DIV expr 

State 28:
expr -> const . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On TO reduce production expr -> const 
-- On THEN reduce production expr -> const 
-- On SEMI reduce production expr -> const 
-- On RSPAREN reduce production expr -> const 
-- On RPAREN reduce production expr -> const 
-- On PLUS reduce production expr -> const 
-- On OR reduce production expr -> const 
-- On NEQ reduce production expr -> const 
-- On MULT reduce production expr -> const 
-- On MINUS reduce production expr -> const 
-- On LT reduce production expr -> const 
-- On LSPAREN reduce production expr -> const 
-- On LE reduce production expr -> const 
-- On GT reduce production expr -> const 
-- On GE reduce production expr -> const 
-- On EQ reduce production expr -> const 
-- On ELSE reduce production expr -> const 
-- On DIV reduce production expr -> const 
-- On BEGIN reduce production expr -> const 
-- On AND reduce production expr -> const 

State 29:
expr -> expr LT . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 30
-- On const shift to state 28

State 30:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr LT expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LSPAREN shift to state 17
-- On DIV shift to state 26
-- On TO reduce production expr -> expr LT expr 
-- On THEN reduce production expr -> expr LT expr 
-- On SEMI reduce production expr -> expr LT expr 
-- On RSPAREN reduce production expr -> expr LT expr 
-- On RPAREN reduce production expr -> expr LT expr 
-- On OR reduce production expr -> expr LT expr 
-- On NEQ reduce production expr -> expr LT expr 
-- On LT reduce production expr -> expr LT expr 
-- On LE reduce production expr -> expr LT expr 
-- On GT reduce production expr -> expr LT expr 
-- On GE reduce production expr -> expr LT expr 
-- On EQ reduce production expr -> expr LT expr 
-- On ELSE reduce production expr -> expr LT expr 
-- On BEGIN reduce production expr -> expr LT expr 
-- On AND reduce production expr -> expr LT expr 

State 31:
expr -> expr LE . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 32
-- On const shift to state 28

State 32:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr LE expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LSPAREN shift to state 17
-- On DIV shift to state 26
-- On TO reduce production expr -> expr LE expr 
-- On THEN reduce production expr -> expr LE expr 
-- On SEMI reduce production expr -> expr LE expr 
-- On RSPAREN reduce production expr -> expr LE expr 
-- On RPAREN reduce production expr -> expr LE expr 
-- On OR reduce production expr -> expr LE expr 
-- On NEQ reduce production expr -> expr LE expr 
-- On LT reduce production expr -> expr LE expr 
-- On LE reduce production expr -> expr LE expr 
-- On GT reduce production expr -> expr LE expr 
-- On GE reduce production expr -> expr LE expr 
-- On EQ reduce production expr -> expr LE expr 
-- On ELSE reduce production expr -> expr LE expr 
-- On BEGIN reduce production expr -> expr LE expr 
-- On AND reduce production expr -> expr LE expr 

State 33:
expr -> expr GT . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 34
-- On const shift to state 28

State 34:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr GT expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LSPAREN shift to state 17
-- On DIV shift to state 26
-- On TO reduce production expr -> expr GT expr 
-- On THEN reduce production expr -> expr GT expr 
-- On SEMI reduce production expr -> expr GT expr 
-- On RSPAREN reduce production expr -> expr GT expr 
-- On RPAREN reduce production expr -> expr GT expr 
-- On OR reduce production expr -> expr GT expr 
-- On NEQ reduce production expr -> expr GT expr 
-- On LT reduce production expr -> expr GT expr 
-- On LE reduce production expr -> expr GT expr 
-- On GT reduce production expr -> expr GT expr 
-- On GE reduce production expr -> expr GT expr 
-- On EQ reduce production expr -> expr GT expr 
-- On ELSE reduce production expr -> expr GT expr 
-- On BEGIN reduce production expr -> expr GT expr 
-- On AND reduce production expr -> expr GT expr 

State 35:
expr -> expr GE . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 36
-- On const shift to state 28

State 36:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr GE expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LSPAREN shift to state 17
-- On DIV shift to state 26
-- On TO reduce production expr -> expr GE expr 
-- On THEN reduce production expr -> expr GE expr 
-- On SEMI reduce production expr -> expr GE expr 
-- On RSPAREN reduce production expr -> expr GE expr 
-- On RPAREN reduce production expr -> expr GE expr 
-- On OR reduce production expr -> expr GE expr 
-- On NEQ reduce production expr -> expr GE expr 
-- On LT reduce production expr -> expr GE expr 
-- On LE reduce production expr -> expr GE expr 
-- On GT reduce production expr -> expr GE expr 
-- On GE reduce production expr -> expr GE expr 
-- On EQ reduce production expr -> expr GE expr 
-- On ELSE reduce production expr -> expr GE expr 
-- On BEGIN reduce production expr -> expr GE expr 
-- On AND reduce production expr -> expr GE expr 

State 37:
expr -> expr EQ . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 38
-- On const shift to state 28

State 38:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr EQ expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LSPAREN shift to state 17
-- On DIV shift to state 26
-- On TO reduce production expr -> expr EQ expr 
-- On THEN reduce production expr -> expr EQ expr 
-- On SEMI reduce production expr -> expr EQ expr 
-- On RSPAREN reduce production expr -> expr EQ expr 
-- On RPAREN reduce production expr -> expr EQ expr 
-- On OR reduce production expr -> expr EQ expr 
-- On NEQ reduce production expr -> expr EQ expr 
-- On LT reduce production expr -> expr EQ expr 
-- On LE reduce production expr -> expr EQ expr 
-- On GT reduce production expr -> expr EQ expr 
-- On GE reduce production expr -> expr EQ expr 
-- On EQ reduce production expr -> expr EQ expr 
-- On ELSE reduce production expr -> expr EQ expr 
-- On BEGIN reduce production expr -> expr EQ expr 
-- On AND reduce production expr -> expr EQ expr 

State 39:
expr -> expr AND . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 40
-- On const shift to state 28

State 40:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr AND expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On TO reduce production expr -> expr AND expr 
-- On THEN reduce production expr -> expr AND expr 
-- On SEMI reduce production expr -> expr AND expr 
-- On RSPAREN reduce production expr -> expr AND expr 
-- On RPAREN reduce production expr -> expr AND expr 
-- On OR reduce production expr -> expr AND expr 
-- On ELSE reduce production expr -> expr AND expr 
-- On BEGIN reduce production expr -> expr AND expr 
-- On AND reduce production expr -> expr AND expr 

State 41:
expr -> IF expr THEN expr ELSE . expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 42
-- On const shift to state 28

State 42:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> IF expr THEN expr ELSE expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39
-- On TO reduce production expr -> IF expr THEN expr ELSE expr 
-- On THEN reduce production expr -> IF expr THEN expr ELSE expr 
-- On SEMI reduce production expr -> IF expr THEN expr ELSE expr 
-- On RSPAREN reduce production expr -> IF expr THEN expr ELSE expr 
-- On RPAREN reduce production expr -> IF expr THEN expr ELSE expr 
-- On ELSE reduce production expr -> IF expr THEN expr ELSE expr 
-- On BEGIN reduce production expr -> IF expr THEN expr ELSE expr 

State 43:
expr -> LPAREN expr . RPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LSPAREN expr RSPAREN [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
-- On RPAREN shift to state 44
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 44:
expr -> LPAREN expr RPAREN . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On TO reduce production expr -> LPAREN expr RPAREN 
-- On THEN reduce production expr -> LPAREN expr RPAREN 
-- On SEMI reduce production expr -> LPAREN expr RPAREN 
-- On RSPAREN reduce production expr -> LPAREN expr RPAREN 
-- On RPAREN reduce production expr -> LPAREN expr RPAREN 
-- On PLUS reduce production expr -> LPAREN expr RPAREN 
-- On OR reduce production expr -> LPAREN expr RPAREN 
-- On NEQ reduce production expr -> LPAREN expr RPAREN 
-- On MULT reduce production expr -> LPAREN expr RPAREN 
-- On MINUS reduce production expr -> LPAREN expr RPAREN 
-- On LT reduce production expr -> LPAREN expr RPAREN 
-- On LSPAREN reduce production expr -> LPAREN expr RPAREN 
-- On LE reduce production expr -> LPAREN expr RPAREN 
-- On GT reduce production expr -> LPAREN expr RPAREN 
-- On GE reduce production expr -> LPAREN expr RPAREN 
-- On EQ reduce production expr -> LPAREN expr RPAREN 
-- On ELSE reduce production expr -> LPAREN expr RPAREN 
-- On DIV reduce production expr -> LPAREN expr RPAREN 
-- On BEGIN reduce production expr -> LPAREN expr RPAREN 
-- On AND reduce production expr -> LPAREN expr RPAREN 

State 45:
expr -> LSPAREN expr . RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LSPAREN expr RSPAREN [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
-- On RSPAREN shift to state 46
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 46:
expr -> LSPAREN expr RSPAREN . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On TO reduce production expr -> LSPAREN expr RSPAREN 
-- On THEN reduce production expr -> LSPAREN expr RSPAREN 
-- On SEMI reduce production expr -> LSPAREN expr RSPAREN 
-- On RSPAREN reduce production expr -> LSPAREN expr RSPAREN 
-- On RPAREN reduce production expr -> LSPAREN expr RSPAREN 
-- On PLUS reduce production expr -> LSPAREN expr RSPAREN 
-- On OR reduce production expr -> LSPAREN expr RSPAREN 
-- On NEQ reduce production expr -> LSPAREN expr RSPAREN 
-- On MULT reduce production expr -> LSPAREN expr RSPAREN 
-- On MINUS reduce production expr -> LSPAREN expr RSPAREN 
-- On LT reduce production expr -> LSPAREN expr RSPAREN 
-- On LSPAREN reduce production expr -> LSPAREN expr RSPAREN 
-- On LE reduce production expr -> LSPAREN expr RSPAREN 
-- On GT reduce production expr -> LSPAREN expr RSPAREN 
-- On GE reduce production expr -> LSPAREN expr RSPAREN 
-- On EQ reduce production expr -> LSPAREN expr RSPAREN 
-- On ELSE reduce production expr -> LSPAREN expr RSPAREN 
-- On DIV reduce production expr -> LSPAREN expr RSPAREN 
-- On BEGIN reduce production expr -> LSPAREN expr RSPAREN 
-- On AND reduce production expr -> LSPAREN expr RSPAREN 

State 47:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> MINUS expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On MULT shift to state 15
-- On LSPAREN shift to state 17
-- On DIV shift to state 26
-- On TO reduce production expr -> MINUS expr 
-- On THEN reduce production expr -> MINUS expr 
-- On SEMI reduce production expr -> MINUS expr 
-- On RSPAREN reduce production expr -> MINUS expr 
-- On RPAREN reduce production expr -> MINUS expr 
-- On PLUS reduce production expr -> MINUS expr 
-- On OR reduce production expr -> MINUS expr 
-- On NEQ reduce production expr -> MINUS expr 
-- On MINUS reduce production expr -> MINUS expr 
-- On LT reduce production expr -> MINUS expr 
-- On LE reduce production expr -> MINUS expr 
-- On GT reduce production expr -> MINUS expr 
-- On GE reduce production expr -> MINUS expr 
-- On EQ reduce production expr -> MINUS expr 
-- On ELSE reduce production expr -> MINUS expr 
-- On BEGIN reduce production expr -> MINUS expr 
-- On AND reduce production expr -> MINUS expr 

State 48:
expr -> expr . LSPAREN expr RSPAREN [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> NOT expr . [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . PLUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MINUS expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . MULT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . DIV expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . AND expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . OR expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . EQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . NEQ expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . LE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GT expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
expr -> expr . GE expr [ TO THEN SEMI RSPAREN RPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ ELSE DIV BEGIN AND ]
-- On PLUS shift to state 13
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On TO reduce production expr -> NOT expr 
-- On THEN reduce production expr -> NOT expr 
-- On SEMI reduce production expr -> NOT expr 
-- On RSPAREN reduce production expr -> NOT expr 
-- On RPAREN reduce production expr -> NOT expr 
-- On OR reduce production expr -> NOT expr 
-- On ELSE reduce production expr -> NOT expr 
-- On BEGIN reduce production expr -> NOT expr 
-- On AND reduce production expr -> NOT expr 

State 49:
expr -> expr . LSPAREN expr RSPAREN [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . PLUS expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . MINUS expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . MULT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . DIV expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . AND expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . OR expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . EQ expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . NEQ expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . LT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . LE expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . GT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . GE expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
instr -> WHILE expr . block [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On BEGIN shift to state 50
-- On AND shift to state 39
-- On block shift to state 87

State 50:
block -> BEGIN . list(instr) END [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE shift to state 1
-- On VAR shift to state 51
-- On PRINT shift to state 57
-- On NOT shift to state 2
-- On NEWLINE shift to state 60
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 62
-- On FOR shift to state 66
-- On EXIT shift to state 73
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On BEGIN shift to state 50
-- On list(instr) shift to state 75
-- On instr shift to state 77
-- On expr shift to state 79
-- On const shift to state 28
-- On block shift to state 86
-- On END reduce production list(instr) -> 

State 51:
instr -> VAR . IDENT SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
instr -> VAR . IDENT ASSIGN expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On IDENT shift to state 52

State 52:
instr -> VAR IDENT . SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
instr -> VAR IDENT . ASSIGN expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 53
-- On ASSIGN shift to state 54

State 53:
instr -> VAR IDENT SEMI . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> VAR IDENT SEMI 
-- On VAR reduce production instr -> VAR IDENT SEMI 
-- On PRINT reduce production instr -> VAR IDENT SEMI 
-- On NOT reduce production instr -> VAR IDENT SEMI 
-- On NEWLINE reduce production instr -> VAR IDENT SEMI 
-- On MINUS reduce production instr -> VAR IDENT SEMI 
-- On LSPAREN reduce production instr -> VAR IDENT SEMI 
-- On LPAREN reduce production instr -> VAR IDENT SEMI 
-- On IF reduce production instr -> VAR IDENT SEMI 
-- On IDENT reduce production instr -> VAR IDENT SEMI 
-- On FOR reduce production instr -> VAR IDENT SEMI 
-- On EXIT reduce production instr -> VAR IDENT SEMI 
-- On EOF reduce production instr -> VAR IDENT SEMI 
-- On END reduce production instr -> VAR IDENT SEMI 
-- On CONST_INT reduce production instr -> VAR IDENT SEMI 
-- On CONST_BOOL reduce production instr -> VAR IDENT SEMI 
-- On BEGIN reduce production instr -> VAR IDENT SEMI 

State 54:
instr -> VAR IDENT ASSIGN . expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 55
-- On const shift to state 28

State 55:
expr -> expr . LSPAREN expr RSPAREN [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> VAR IDENT ASSIGN expr . SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 56
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 56:
instr -> VAR IDENT ASSIGN expr SEMI . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On VAR reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On PRINT reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On NOT reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On NEWLINE reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On MINUS reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On LSPAREN reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On LPAREN reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On IF reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On IDENT reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On FOR reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On EXIT reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On EOF reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On END reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On CONST_INT reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On CONST_BOOL reduce production instr -> VAR IDENT ASSIGN expr SEMI 
-- On BEGIN reduce production instr -> VAR IDENT ASSIGN expr SEMI 

State 57:
instr -> PRINT . expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 58
-- On const shift to state 28

State 58:
expr -> expr . LSPAREN expr RSPAREN [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> PRINT expr . SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 59
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 59:
instr -> PRINT expr SEMI . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> PRINT expr SEMI 
-- On VAR reduce production instr -> PRINT expr SEMI 
-- On PRINT reduce production instr -> PRINT expr SEMI 
-- On NOT reduce production instr -> PRINT expr SEMI 
-- On NEWLINE reduce production instr -> PRINT expr SEMI 
-- On MINUS reduce production instr -> PRINT expr SEMI 
-- On LSPAREN reduce production instr -> PRINT expr SEMI 
-- On LPAREN reduce production instr -> PRINT expr SEMI 
-- On IF reduce production instr -> PRINT expr SEMI 
-- On IDENT reduce production instr -> PRINT expr SEMI 
-- On FOR reduce production instr -> PRINT expr SEMI 
-- On EXIT reduce production instr -> PRINT expr SEMI 
-- On EOF reduce production instr -> PRINT expr SEMI 
-- On END reduce production instr -> PRINT expr SEMI 
-- On CONST_INT reduce production instr -> PRINT expr SEMI 
-- On CONST_BOOL reduce production instr -> PRINT expr SEMI 
-- On BEGIN reduce production instr -> PRINT expr SEMI 

State 60:
instr -> NEWLINE . SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 61

State 61:
instr -> NEWLINE SEMI . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> NEWLINE SEMI 
-- On VAR reduce production instr -> NEWLINE SEMI 
-- On PRINT reduce production instr -> NEWLINE SEMI 
-- On NOT reduce production instr -> NEWLINE SEMI 
-- On NEWLINE reduce production instr -> NEWLINE SEMI 
-- On MINUS reduce production instr -> NEWLINE SEMI 
-- On LSPAREN reduce production instr -> NEWLINE SEMI 
-- On LPAREN reduce production instr -> NEWLINE SEMI 
-- On IF reduce production instr -> NEWLINE SEMI 
-- On IDENT reduce production instr -> NEWLINE SEMI 
-- On FOR reduce production instr -> NEWLINE SEMI 
-- On EXIT reduce production instr -> NEWLINE SEMI 
-- On EOF reduce production instr -> NEWLINE SEMI 
-- On END reduce production instr -> NEWLINE SEMI 
-- On CONST_INT reduce production instr -> NEWLINE SEMI 
-- On CONST_BOOL reduce production instr -> NEWLINE SEMI 
-- On BEGIN reduce production instr -> NEWLINE SEMI 

State 62:
expr -> IDENT . [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> IDENT . ASSIGN expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On ASSIGN shift to state 63
-- On PLUS reduce production expr -> IDENT 
-- On OR reduce production expr -> IDENT 
-- On NEQ reduce production expr -> IDENT 
-- On MULT reduce production expr -> IDENT 
-- On MINUS reduce production expr -> IDENT 
-- On LT reduce production expr -> IDENT 
-- On LSPAREN reduce production expr -> IDENT 
-- On LE reduce production expr -> IDENT 
-- On GT reduce production expr -> IDENT 
-- On GE reduce production expr -> IDENT 
-- On EQ reduce production expr -> IDENT 
-- On DIV reduce production expr -> IDENT 
-- On AND reduce production expr -> IDENT 

State 63:
instr -> IDENT ASSIGN . expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 64
-- On const shift to state 28

State 64:
expr -> expr . LSPAREN expr RSPAREN [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> IDENT ASSIGN expr . SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 65
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 65:
instr -> IDENT ASSIGN expr SEMI . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> IDENT ASSIGN expr SEMI 
-- On VAR reduce production instr -> IDENT ASSIGN expr SEMI 
-- On PRINT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On NOT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On NEWLINE reduce production instr -> IDENT ASSIGN expr SEMI 
-- On MINUS reduce production instr -> IDENT ASSIGN expr SEMI 
-- On LSPAREN reduce production instr -> IDENT ASSIGN expr SEMI 
-- On LPAREN reduce production instr -> IDENT ASSIGN expr SEMI 
-- On IF reduce production instr -> IDENT ASSIGN expr SEMI 
-- On IDENT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On FOR reduce production instr -> IDENT ASSIGN expr SEMI 
-- On EXIT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On EOF reduce production instr -> IDENT ASSIGN expr SEMI 
-- On END reduce production instr -> IDENT ASSIGN expr SEMI 
-- On CONST_INT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On CONST_BOOL reduce production instr -> IDENT ASSIGN expr SEMI 
-- On BEGIN reduce production instr -> IDENT ASSIGN expr SEMI 

State 66:
instr -> FOR . IDENT ASSIGN expr TO expr block [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On IDENT shift to state 67

State 67:
instr -> FOR IDENT . ASSIGN expr TO expr block [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On ASSIGN shift to state 68

State 68:
instr -> FOR IDENT ASSIGN . expr TO expr block [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 69
-- On const shift to state 28

State 69:
expr -> expr . LSPAREN expr RSPAREN [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ TO PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> FOR IDENT ASSIGN expr . TO expr block [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On TO shift to state 70
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 70:
instr -> FOR IDENT ASSIGN expr TO . expr block [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 71
-- On const shift to state 28

State 71:
expr -> expr . LSPAREN expr RSPAREN [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . PLUS expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . MINUS expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . MULT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . DIV expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . AND expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . OR expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . EQ expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . NEQ expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . LT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . LE expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . GT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
expr -> expr . GE expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV BEGIN AND ]
instr -> FOR IDENT ASSIGN expr TO expr . block [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On BEGIN shift to state 50
-- On AND shift to state 39
-- On block shift to state 72

State 72:
instr -> FOR IDENT ASSIGN expr TO expr block . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On VAR reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On PRINT reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On NOT reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On NEWLINE reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On MINUS reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On LSPAREN reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On LPAREN reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On IF reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On IDENT reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On FOR reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On EXIT reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On EOF reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On END reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On CONST_INT reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On CONST_BOOL reduce production instr -> FOR IDENT ASSIGN expr TO expr block 
-- On BEGIN reduce production instr -> FOR IDENT ASSIGN expr TO expr block 

State 73:
instr -> EXIT . SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 74

State 74:
instr -> EXIT SEMI . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> EXIT SEMI 
-- On VAR reduce production instr -> EXIT SEMI 
-- On PRINT reduce production instr -> EXIT SEMI 
-- On NOT reduce production instr -> EXIT SEMI 
-- On NEWLINE reduce production instr -> EXIT SEMI 
-- On MINUS reduce production instr -> EXIT SEMI 
-- On LSPAREN reduce production instr -> EXIT SEMI 
-- On LPAREN reduce production instr -> EXIT SEMI 
-- On IF reduce production instr -> EXIT SEMI 
-- On IDENT reduce production instr -> EXIT SEMI 
-- On FOR reduce production instr -> EXIT SEMI 
-- On EXIT reduce production instr -> EXIT SEMI 
-- On EOF reduce production instr -> EXIT SEMI 
-- On END reduce production instr -> EXIT SEMI 
-- On CONST_INT reduce production instr -> EXIT SEMI 
-- On CONST_BOOL reduce production instr -> EXIT SEMI 
-- On BEGIN reduce production instr -> EXIT SEMI 

State 75:
block -> BEGIN list(instr) . END [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On END shift to state 76

State 76:
block -> BEGIN list(instr) END . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production block -> BEGIN list(instr) END 
-- On VAR reduce production block -> BEGIN list(instr) END 
-- On PRINT reduce production block -> BEGIN list(instr) END 
-- On NOT reduce production block -> BEGIN list(instr) END 
-- On NEWLINE reduce production block -> BEGIN list(instr) END 
-- On MINUS reduce production block -> BEGIN list(instr) END 
-- On LSPAREN reduce production block -> BEGIN list(instr) END 
-- On LPAREN reduce production block -> BEGIN list(instr) END 
-- On IF reduce production block -> BEGIN list(instr) END 
-- On IDENT reduce production block -> BEGIN list(instr) END 
-- On FOR reduce production block -> BEGIN list(instr) END 
-- On EXIT reduce production block -> BEGIN list(instr) END 
-- On EOF reduce production block -> BEGIN list(instr) END 
-- On END reduce production block -> BEGIN list(instr) END 
-- On CONST_INT reduce production block -> BEGIN list(instr) END 
-- On CONST_BOOL reduce production block -> BEGIN list(instr) END 
-- On BEGIN reduce production block -> BEGIN list(instr) END 

State 77:
list(instr) -> instr . list(instr) [ EOF END ]
-- On WHILE shift to state 1
-- On VAR shift to state 51
-- On PRINT shift to state 57
-- On NOT shift to state 2
-- On NEWLINE shift to state 60
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 62
-- On FOR shift to state 66
-- On EXIT shift to state 73
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On BEGIN shift to state 50
-- On list(instr) shift to state 78
-- On instr shift to state 77
-- On expr shift to state 79
-- On const shift to state 28
-- On block shift to state 86
-- On EOF reduce production list(instr) -> 
-- On END reduce production list(instr) -> 

State 78:
list(instr) -> instr list(instr) . [ EOF END ]
-- On EOF reduce production list(instr) -> instr list(instr) 
-- On END reduce production list(instr) -> instr list(instr) 

State 79:
expr -> expr . LSPAREN expr RSPAREN [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> expr . LSPAREN expr RSPAREN ASSIGN expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 80
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 80:
expr -> expr LSPAREN . expr RSPAREN [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> expr LSPAREN . expr RSPAREN ASSIGN expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 81
-- On const shift to state 28

State 81:
expr -> expr . LSPAREN expr RSPAREN [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr LSPAREN expr . RSPAREN [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ RSPAREN PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> expr LSPAREN expr . RSPAREN ASSIGN expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On RSPAREN shift to state 82
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 82:
expr -> expr LSPAREN expr RSPAREN . [ PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> expr LSPAREN expr RSPAREN . ASSIGN expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On ASSIGN shift to state 83
-- On PLUS reduce production expr -> expr LSPAREN expr RSPAREN 
-- On OR reduce production expr -> expr LSPAREN expr RSPAREN 
-- On NEQ reduce production expr -> expr LSPAREN expr RSPAREN 
-- On MULT reduce production expr -> expr LSPAREN expr RSPAREN 
-- On MINUS reduce production expr -> expr LSPAREN expr RSPAREN 
-- On LT reduce production expr -> expr LSPAREN expr RSPAREN 
-- On LSPAREN reduce production expr -> expr LSPAREN expr RSPAREN 
-- On LE reduce production expr -> expr LSPAREN expr RSPAREN 
-- On GT reduce production expr -> expr LSPAREN expr RSPAREN 
-- On GE reduce production expr -> expr LSPAREN expr RSPAREN 
-- On EQ reduce production expr -> expr LSPAREN expr RSPAREN 
-- On DIV reduce production expr -> expr LSPAREN expr RSPAREN 
-- On AND reduce production expr -> expr LSPAREN expr RSPAREN 

State 83:
instr -> expr LSPAREN expr RSPAREN ASSIGN . expr SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LSPAREN shift to state 4
-- On LPAREN shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 8
-- On CONST_BOOL shift to state 9
-- On expr shift to state 84
-- On const shift to state 28

State 84:
expr -> expr . LSPAREN expr RSPAREN [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NEQ MULT MINUS LT LSPAREN LE GT GE EQ DIV AND ]
instr -> expr LSPAREN expr RSPAREN ASSIGN expr . SEMI [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 85
-- On PLUS shift to state 13
-- On OR shift to state 20
-- On NEQ shift to state 22
-- On MULT shift to state 15
-- On MINUS shift to state 24
-- On LT shift to state 29
-- On LSPAREN shift to state 17
-- On LE shift to state 31
-- On GT shift to state 33
-- On GE shift to state 35
-- On EQ shift to state 37
-- On DIV shift to state 26
-- On AND shift to state 39

State 85:
instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On VAR reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On PRINT reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On NOT reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On NEWLINE reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On MINUS reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On LSPAREN reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On LPAREN reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On IF reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On IDENT reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On FOR reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On EXIT reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On EOF reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On END reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On CONST_INT reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On CONST_BOOL reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 
-- On BEGIN reduce production instr -> expr LSPAREN expr RSPAREN ASSIGN expr SEMI 

State 86:
instr -> block . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> block 
-- On VAR reduce production instr -> block 
-- On PRINT reduce production instr -> block 
-- On NOT reduce production instr -> block 
-- On NEWLINE reduce production instr -> block 
-- On MINUS reduce production instr -> block 
-- On LSPAREN reduce production instr -> block 
-- On LPAREN reduce production instr -> block 
-- On IF reduce production instr -> block 
-- On IDENT reduce production instr -> block 
-- On FOR reduce production instr -> block 
-- On EXIT reduce production instr -> block 
-- On EOF reduce production instr -> block 
-- On END reduce production instr -> block 
-- On CONST_INT reduce production instr -> block 
-- On CONST_BOOL reduce production instr -> block 
-- On BEGIN reduce production instr -> block 

State 87:
instr -> WHILE expr block . [ WHILE VAR PRINT NOT NEWLINE MINUS LSPAREN LPAREN IF IDENT FOR EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> WHILE expr block 
-- On VAR reduce production instr -> WHILE expr block 
-- On PRINT reduce production instr -> WHILE expr block 
-- On NOT reduce production instr -> WHILE expr block 
-- On NEWLINE reduce production instr -> WHILE expr block 
-- On MINUS reduce production instr -> WHILE expr block 
-- On LSPAREN reduce production instr -> WHILE expr block 
-- On LPAREN reduce production instr -> WHILE expr block 
-- On IF reduce production instr -> WHILE expr block 
-- On IDENT reduce production instr -> WHILE expr block 
-- On FOR reduce production instr -> WHILE expr block 
-- On EXIT reduce production instr -> WHILE expr block 
-- On EOF reduce production instr -> WHILE expr block 
-- On END reduce production instr -> WHILE expr block 
-- On CONST_INT reduce production instr -> WHILE expr block 
-- On CONST_BOOL reduce production instr -> WHILE expr block 
-- On BEGIN reduce production instr -> WHILE expr block 

State 88:
prog' -> prog . [ # ]
-- On # accept prog

State 89:
prog -> list(instr) . EOF [ # ]
-- On EOF shift to state 90

State 90:
prog -> list(instr) EOF . [ # ]
-- On # reduce production prog -> list(instr) EOF 

