State 0:
prog' -> . prog [ # ]
-- On WHILE shift to state 1
-- On VAR shift to state 63
-- On RETURN shift to state 66
-- On PRINT shift to state 69
-- On NOT shift to state 2
-- On NEWLINE shift to state 72
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 74
-- On FUN shift to state 82
-- On EXIT shift to state 90
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On BEGIN shift to state 62
-- On prog shift to state 103
-- On list(instr) shift to state 104
-- On instr shift to state 94
-- On field_expr shift to state 96
-- On expr shift to state 100
-- On const shift to state 31
-- On block shift to state 101
-- On EOF reduce production list(instr) -> 

State 1:
instr -> WHILE . expr block [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 61
-- On const shift to state 31

State 2:
expr -> NOT . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 60
-- On const shift to state 31

State 3:
expr -> MINUS . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 59
-- On const shift to state 31

State 4:
expr -> LPAREN . expr RPAREN [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 57
-- On const shift to state 31

State 5:
expr -> LBRACKET . expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 55
-- On const shift to state 31

State 6:
expr -> IF . expr THEN expr ELSE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 50
-- On const shift to state 31

State 7:
expr -> IDENT . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> IDENT . LPAREN list(expr) RPAREN SEMI [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On LPAREN shift to state 8
-- On THEN reduce production expr -> IDENT 
-- On SEMI reduce production expr -> IDENT 
-- On RPAREN reduce production expr -> IDENT 
-- On RBRACKET reduce production expr -> IDENT 
-- On PLUS reduce production expr -> IDENT 
-- On OR reduce production expr -> IDENT 
-- On NOT reduce production expr -> IDENT 
-- On NEQ reduce production expr -> IDENT 
-- On MULT reduce production expr -> IDENT 
-- On MINUS reduce production expr -> IDENT 
-- On LT reduce production expr -> IDENT 
-- On LPAREN reduce production expr -> IDENT 
-- On LE reduce production expr -> IDENT 
-- On LBRACKET reduce production expr -> IDENT 
-- On IF reduce production expr -> IDENT 
-- On IDENT reduce production expr -> IDENT 
-- On GT reduce production expr -> IDENT 
-- On GE reduce production expr -> IDENT 
-- On EQ reduce production expr -> IDENT 
-- On ELSE reduce production expr -> IDENT 
-- On DIV reduce production expr -> IDENT 
-- On CONST_INT reduce production expr -> IDENT 
-- On CONST_BOOL reduce production expr -> IDENT 
-- On BEGIN reduce production expr -> IDENT 
-- On AND reduce production expr -> IDENT 
** Conflict on LPAREN

State 8:
expr -> IDENT LPAREN . list(expr) RPAREN SEMI [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On list(expr) shift to state 11
-- On field_expr shift to state 14
-- On expr shift to state 15
-- On const shift to state 31
-- On RPAREN reduce production list(expr) -> 

State 9:
const -> CONST_INT . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On THEN reduce production const -> CONST_INT 
-- On SEMI reduce production const -> CONST_INT 
-- On RPAREN reduce production const -> CONST_INT 
-- On RBRACKET reduce production const -> CONST_INT 
-- On PLUS reduce production const -> CONST_INT 
-- On OR reduce production const -> CONST_INT 
-- On NOT reduce production const -> CONST_INT 
-- On NEQ reduce production const -> CONST_INT 
-- On MULT reduce production const -> CONST_INT 
-- On MINUS reduce production const -> CONST_INT 
-- On LT reduce production const -> CONST_INT 
-- On LPAREN reduce production const -> CONST_INT 
-- On LE reduce production const -> CONST_INT 
-- On LBRACKET reduce production const -> CONST_INT 
-- On IF reduce production const -> CONST_INT 
-- On IDENT reduce production const -> CONST_INT 
-- On GT reduce production const -> CONST_INT 
-- On GE reduce production const -> CONST_INT 
-- On EQ reduce production const -> CONST_INT 
-- On ELSE reduce production const -> CONST_INT 
-- On DIV reduce production const -> CONST_INT 
-- On CONST_INT reduce production const -> CONST_INT 
-- On CONST_BOOL reduce production const -> CONST_INT 
-- On BEGIN reduce production const -> CONST_INT 
-- On AND reduce production const -> CONST_INT 

State 10:
const -> CONST_BOOL . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On THEN reduce production const -> CONST_BOOL 
-- On SEMI reduce production const -> CONST_BOOL 
-- On RPAREN reduce production const -> CONST_BOOL 
-- On RBRACKET reduce production const -> CONST_BOOL 
-- On PLUS reduce production const -> CONST_BOOL 
-- On OR reduce production const -> CONST_BOOL 
-- On NOT reduce production const -> CONST_BOOL 
-- On NEQ reduce production const -> CONST_BOOL 
-- On MULT reduce production const -> CONST_BOOL 
-- On MINUS reduce production const -> CONST_BOOL 
-- On LT reduce production const -> CONST_BOOL 
-- On LPAREN reduce production const -> CONST_BOOL 
-- On LE reduce production const -> CONST_BOOL 
-- On LBRACKET reduce production const -> CONST_BOOL 
-- On IF reduce production const -> CONST_BOOL 
-- On IDENT reduce production const -> CONST_BOOL 
-- On GT reduce production const -> CONST_BOOL 
-- On GE reduce production const -> CONST_BOOL 
-- On EQ reduce production const -> CONST_BOOL 
-- On ELSE reduce production const -> CONST_BOOL 
-- On DIV reduce production const -> CONST_BOOL 
-- On CONST_INT reduce production const -> CONST_BOOL 
-- On CONST_BOOL reduce production const -> CONST_BOOL 
-- On BEGIN reduce production const -> CONST_BOOL 
-- On AND reduce production const -> CONST_BOOL 

State 11:
expr -> IDENT LPAREN list(expr) . RPAREN SEMI [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On RPAREN shift to state 12

State 12:
expr -> IDENT LPAREN list(expr) RPAREN . SEMI [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On SEMI shift to state 13

State 13:
expr -> IDENT LPAREN list(expr) RPAREN SEMI . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On THEN reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On SEMI reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On RPAREN reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On RBRACKET reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On PLUS reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On OR reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On NOT reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On NEQ reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On MULT reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On MINUS reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On LT reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On LPAREN reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On LE reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On LBRACKET reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On IF reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On IDENT reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On GT reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On GE reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On EQ reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On ELSE reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On DIV reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On CONST_INT reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On CONST_BOOL reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On BEGIN reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On AND reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 

State 14:
expr -> field_expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On THEN reduce production expr -> field_expr 
-- On SEMI reduce production expr -> field_expr 
-- On RPAREN reduce production expr -> field_expr 
-- On RBRACKET reduce production expr -> field_expr 
-- On PLUS reduce production expr -> field_expr 
-- On OR reduce production expr -> field_expr 
-- On NOT reduce production expr -> field_expr 
-- On NEQ reduce production expr -> field_expr 
-- On MULT reduce production expr -> field_expr 
-- On MINUS reduce production expr -> field_expr 
-- On LT reduce production expr -> field_expr 
-- On LPAREN reduce production expr -> field_expr 
-- On LE reduce production expr -> field_expr 
-- On LBRACKET reduce production expr -> field_expr 
-- On IF reduce production expr -> field_expr 
-- On IDENT reduce production expr -> field_expr 
-- On GT reduce production expr -> field_expr 
-- On GE reduce production expr -> field_expr 
-- On EQ reduce production expr -> field_expr 
-- On ELSE reduce production expr -> field_expr 
-- On DIV reduce production expr -> field_expr 
-- On CONST_INT reduce production expr -> field_expr 
-- On CONST_BOOL reduce production expr -> field_expr 
-- On BEGIN reduce production expr -> field_expr 
-- On AND reduce production expr -> field_expr 

State 15:
expr -> expr . PLUS expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . EQ expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . NEQ expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
list(expr) -> expr . list(expr) [ RPAREN ]
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NOT shift to state 2
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 44
-- On LT shift to state 32
-- On LPAREN shift to state 4
-- On LE shift to state 34
-- On LBRACKET shift to state 46
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On AND shift to state 42
-- On list(expr) shift to state 49
-- On field_expr shift to state 14
-- On expr shift to state 15
-- On const shift to state 31
-- On RPAREN reduce production list(expr) -> 

State 16:
expr -> expr PLUS . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 17
-- On const shift to state 31

State 17:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr PLUS expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On MULT shift to state 18
-- On LBRACKET shift to state 20
-- On DIV shift to state 29
-- On THEN reduce production expr -> expr PLUS expr 
-- On SEMI reduce production expr -> expr PLUS expr 
-- On RPAREN reduce production expr -> expr PLUS expr 
-- On RBRACKET reduce production expr -> expr PLUS expr 
-- On PLUS reduce production expr -> expr PLUS expr 
-- On OR reduce production expr -> expr PLUS expr 
-- On NOT reduce production expr -> expr PLUS expr 
-- On NEQ reduce production expr -> expr PLUS expr 
-- On MINUS reduce production expr -> expr PLUS expr 
-- On LT reduce production expr -> expr PLUS expr 
-- On LPAREN reduce production expr -> expr PLUS expr 
-- On LE reduce production expr -> expr PLUS expr 
-- On IF reduce production expr -> expr PLUS expr 
-- On IDENT reduce production expr -> expr PLUS expr 
-- On GT reduce production expr -> expr PLUS expr 
-- On GE reduce production expr -> expr PLUS expr 
-- On EQ reduce production expr -> expr PLUS expr 
-- On ELSE reduce production expr -> expr PLUS expr 
-- On CONST_INT reduce production expr -> expr PLUS expr 
-- On CONST_BOOL reduce production expr -> expr PLUS expr 
-- On BEGIN reduce production expr -> expr PLUS expr 
-- On AND reduce production expr -> expr PLUS expr 

State 18:
expr -> expr MULT . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 19
-- On const shift to state 31

State 19:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr MULT expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On LBRACKET shift to state 20
-- On THEN reduce production expr -> expr MULT expr 
-- On SEMI reduce production expr -> expr MULT expr 
-- On RPAREN reduce production expr -> expr MULT expr 
-- On RBRACKET reduce production expr -> expr MULT expr 
-- On PLUS reduce production expr -> expr MULT expr 
-- On OR reduce production expr -> expr MULT expr 
-- On NOT reduce production expr -> expr MULT expr 
-- On NEQ reduce production expr -> expr MULT expr 
-- On MULT reduce production expr -> expr MULT expr 
-- On MINUS reduce production expr -> expr MULT expr 
-- On LT reduce production expr -> expr MULT expr 
-- On LPAREN reduce production expr -> expr MULT expr 
-- On LE reduce production expr -> expr MULT expr 
-- On IF reduce production expr -> expr MULT expr 
-- On IDENT reduce production expr -> expr MULT expr 
-- On GT reduce production expr -> expr MULT expr 
-- On GE reduce production expr -> expr MULT expr 
-- On EQ reduce production expr -> expr MULT expr 
-- On ELSE reduce production expr -> expr MULT expr 
-- On DIV reduce production expr -> expr MULT expr 
-- On CONST_INT reduce production expr -> expr MULT expr 
-- On CONST_BOOL reduce production expr -> expr MULT expr 
-- On BEGIN reduce production expr -> expr MULT expr 
-- On AND reduce production expr -> expr MULT expr 

State 20:
field_expr -> expr LBRACKET . expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN ASSIGN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 21
-- On const shift to state 31

State 21:
expr -> expr . PLUS expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
field_expr -> expr LBRACKET expr . RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN ASSIGN AND ]
-- On RBRACKET shift to state 22
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 22:
field_expr -> expr LBRACKET expr RBRACKET . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN ASSIGN AND ]
-- On THEN reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On SEMI reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On RPAREN reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On RBRACKET reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On PLUS reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On OR reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On NOT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On NEQ reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On MULT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On MINUS reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On LT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On LPAREN reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On LE reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On LBRACKET reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On IF reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On IDENT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On GT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On GE reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On EQ reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On ELSE reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On DIV reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On CONST_INT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On CONST_BOOL reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On BEGIN reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On ASSIGN reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On AND reduce production field_expr -> expr LBRACKET expr RBRACKET 

State 23:
expr -> expr OR . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 24
-- On const shift to state 31

State 24:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr OR expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42
-- On THEN reduce production expr -> expr OR expr 
-- On SEMI reduce production expr -> expr OR expr 
-- On RPAREN reduce production expr -> expr OR expr 
-- On RBRACKET reduce production expr -> expr OR expr 
-- On OR reduce production expr -> expr OR expr 
-- On NOT reduce production expr -> expr OR expr 
-- On LPAREN reduce production expr -> expr OR expr 
-- On IF reduce production expr -> expr OR expr 
-- On IDENT reduce production expr -> expr OR expr 
-- On ELSE reduce production expr -> expr OR expr 
-- On CONST_INT reduce production expr -> expr OR expr 
-- On CONST_BOOL reduce production expr -> expr OR expr 
-- On BEGIN reduce production expr -> expr OR expr 

State 25:
expr -> expr NEQ . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 26
-- On const shift to state 31

State 26:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr NEQ expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LBRACKET shift to state 20
-- On DIV shift to state 29
-- On THEN reduce production expr -> expr NEQ expr 
-- On SEMI reduce production expr -> expr NEQ expr 
-- On RPAREN reduce production expr -> expr NEQ expr 
-- On RBRACKET reduce production expr -> expr NEQ expr 
-- On OR reduce production expr -> expr NEQ expr 
-- On NOT reduce production expr -> expr NEQ expr 
-- On NEQ reduce production expr -> expr NEQ expr 
-- On LT reduce production expr -> expr NEQ expr 
-- On LPAREN reduce production expr -> expr NEQ expr 
-- On LE reduce production expr -> expr NEQ expr 
-- On IF reduce production expr -> expr NEQ expr 
-- On IDENT reduce production expr -> expr NEQ expr 
-- On GT reduce production expr -> expr NEQ expr 
-- On GE reduce production expr -> expr NEQ expr 
-- On EQ reduce production expr -> expr NEQ expr 
-- On ELSE reduce production expr -> expr NEQ expr 
-- On CONST_INT reduce production expr -> expr NEQ expr 
-- On CONST_BOOL reduce production expr -> expr NEQ expr 
-- On BEGIN reduce production expr -> expr NEQ expr 
-- On AND reduce production expr -> expr NEQ expr 

State 27:
expr -> expr MINUS . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 28
-- On const shift to state 31

State 28:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr MINUS expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On MULT shift to state 18
-- On LBRACKET shift to state 20
-- On DIV shift to state 29
-- On THEN reduce production expr -> expr MINUS expr 
-- On SEMI reduce production expr -> expr MINUS expr 
-- On RPAREN reduce production expr -> expr MINUS expr 
-- On RBRACKET reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On OR reduce production expr -> expr MINUS expr 
-- On NOT reduce production expr -> expr MINUS expr 
-- On NEQ reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On LT reduce production expr -> expr MINUS expr 
-- On LPAREN reduce production expr -> expr MINUS expr 
-- On LE reduce production expr -> expr MINUS expr 
-- On IF reduce production expr -> expr MINUS expr 
-- On IDENT reduce production expr -> expr MINUS expr 
-- On GT reduce production expr -> expr MINUS expr 
-- On GE reduce production expr -> expr MINUS expr 
-- On EQ reduce production expr -> expr MINUS expr 
-- On ELSE reduce production expr -> expr MINUS expr 
-- On CONST_INT reduce production expr -> expr MINUS expr 
-- On CONST_BOOL reduce production expr -> expr MINUS expr 
-- On BEGIN reduce production expr -> expr MINUS expr 
-- On AND reduce production expr -> expr MINUS expr 

State 29:
expr -> expr DIV . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 30
-- On const shift to state 31

State 30:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr DIV expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On LBRACKET shift to state 20
-- On THEN reduce production expr -> expr DIV expr 
-- On SEMI reduce production expr -> expr DIV expr 
-- On RPAREN reduce production expr -> expr DIV expr 
-- On RBRACKET reduce production expr -> expr DIV expr 
-- On PLUS reduce production expr -> expr DIV expr 
-- On OR reduce production expr -> expr DIV expr 
-- On NOT reduce production expr -> expr DIV expr 
-- On NEQ reduce production expr -> expr DIV expr 
-- On MULT reduce production expr -> expr DIV expr 
-- On MINUS reduce production expr -> expr DIV expr 
-- On LT reduce production expr -> expr DIV expr 
-- On LPAREN reduce production expr -> expr DIV expr 
-- On LE reduce production expr -> expr DIV expr 
-- On IF reduce production expr -> expr DIV expr 
-- On IDENT reduce production expr -> expr DIV expr 
-- On GT reduce production expr -> expr DIV expr 
-- On GE reduce production expr -> expr DIV expr 
-- On EQ reduce production expr -> expr DIV expr 
-- On ELSE reduce production expr -> expr DIV expr 
-- On DIV reduce production expr -> expr DIV expr 
-- On CONST_INT reduce production expr -> expr DIV expr 
-- On CONST_BOOL reduce production expr -> expr DIV expr 
-- On BEGIN reduce production expr -> expr DIV expr 
-- On AND reduce production expr -> expr DIV expr 

State 31:
expr -> const . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On THEN reduce production expr -> const 
-- On SEMI reduce production expr -> const 
-- On RPAREN reduce production expr -> const 
-- On RBRACKET reduce production expr -> const 
-- On PLUS reduce production expr -> const 
-- On OR reduce production expr -> const 
-- On NOT reduce production expr -> const 
-- On NEQ reduce production expr -> const 
-- On MULT reduce production expr -> const 
-- On MINUS reduce production expr -> const 
-- On LT reduce production expr -> const 
-- On LPAREN reduce production expr -> const 
-- On LE reduce production expr -> const 
-- On LBRACKET reduce production expr -> const 
-- On IF reduce production expr -> const 
-- On IDENT reduce production expr -> const 
-- On GT reduce production expr -> const 
-- On GE reduce production expr -> const 
-- On EQ reduce production expr -> const 
-- On ELSE reduce production expr -> const 
-- On DIV reduce production expr -> const 
-- On CONST_INT reduce production expr -> const 
-- On CONST_BOOL reduce production expr -> const 
-- On BEGIN reduce production expr -> const 
-- On AND reduce production expr -> const 

State 32:
expr -> expr LT . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 33
-- On const shift to state 31

State 33:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr LT expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LBRACKET shift to state 20
-- On DIV shift to state 29
-- On THEN reduce production expr -> expr LT expr 
-- On SEMI reduce production expr -> expr LT expr 
-- On RPAREN reduce production expr -> expr LT expr 
-- On RBRACKET reduce production expr -> expr LT expr 
-- On OR reduce production expr -> expr LT expr 
-- On NOT reduce production expr -> expr LT expr 
-- On NEQ reduce production expr -> expr LT expr 
-- On LT reduce production expr -> expr LT expr 
-- On LPAREN reduce production expr -> expr LT expr 
-- On LE reduce production expr -> expr LT expr 
-- On IF reduce production expr -> expr LT expr 
-- On IDENT reduce production expr -> expr LT expr 
-- On GT reduce production expr -> expr LT expr 
-- On GE reduce production expr -> expr LT expr 
-- On EQ reduce production expr -> expr LT expr 
-- On ELSE reduce production expr -> expr LT expr 
-- On CONST_INT reduce production expr -> expr LT expr 
-- On CONST_BOOL reduce production expr -> expr LT expr 
-- On BEGIN reduce production expr -> expr LT expr 
-- On AND reduce production expr -> expr LT expr 

State 34:
expr -> expr LE . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 35
-- On const shift to state 31

State 35:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr LE expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LBRACKET shift to state 20
-- On DIV shift to state 29
-- On THEN reduce production expr -> expr LE expr 
-- On SEMI reduce production expr -> expr LE expr 
-- On RPAREN reduce production expr -> expr LE expr 
-- On RBRACKET reduce production expr -> expr LE expr 
-- On OR reduce production expr -> expr LE expr 
-- On NOT reduce production expr -> expr LE expr 
-- On NEQ reduce production expr -> expr LE expr 
-- On LT reduce production expr -> expr LE expr 
-- On LPAREN reduce production expr -> expr LE expr 
-- On LE reduce production expr -> expr LE expr 
-- On IF reduce production expr -> expr LE expr 
-- On IDENT reduce production expr -> expr LE expr 
-- On GT reduce production expr -> expr LE expr 
-- On GE reduce production expr -> expr LE expr 
-- On EQ reduce production expr -> expr LE expr 
-- On ELSE reduce production expr -> expr LE expr 
-- On CONST_INT reduce production expr -> expr LE expr 
-- On CONST_BOOL reduce production expr -> expr LE expr 
-- On BEGIN reduce production expr -> expr LE expr 
-- On AND reduce production expr -> expr LE expr 

State 36:
expr -> expr GT . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 37
-- On const shift to state 31

State 37:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr GT expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LBRACKET shift to state 20
-- On DIV shift to state 29
-- On THEN reduce production expr -> expr GT expr 
-- On SEMI reduce production expr -> expr GT expr 
-- On RPAREN reduce production expr -> expr GT expr 
-- On RBRACKET reduce production expr -> expr GT expr 
-- On OR reduce production expr -> expr GT expr 
-- On NOT reduce production expr -> expr GT expr 
-- On NEQ reduce production expr -> expr GT expr 
-- On LT reduce production expr -> expr GT expr 
-- On LPAREN reduce production expr -> expr GT expr 
-- On LE reduce production expr -> expr GT expr 
-- On IF reduce production expr -> expr GT expr 
-- On IDENT reduce production expr -> expr GT expr 
-- On GT reduce production expr -> expr GT expr 
-- On GE reduce production expr -> expr GT expr 
-- On EQ reduce production expr -> expr GT expr 
-- On ELSE reduce production expr -> expr GT expr 
-- On CONST_INT reduce production expr -> expr GT expr 
-- On CONST_BOOL reduce production expr -> expr GT expr 
-- On BEGIN reduce production expr -> expr GT expr 
-- On AND reduce production expr -> expr GT expr 

State 38:
expr -> expr GE . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 39
-- On const shift to state 31

State 39:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr GE expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LBRACKET shift to state 20
-- On DIV shift to state 29
-- On THEN reduce production expr -> expr GE expr 
-- On SEMI reduce production expr -> expr GE expr 
-- On RPAREN reduce production expr -> expr GE expr 
-- On RBRACKET reduce production expr -> expr GE expr 
-- On OR reduce production expr -> expr GE expr 
-- On NOT reduce production expr -> expr GE expr 
-- On NEQ reduce production expr -> expr GE expr 
-- On LT reduce production expr -> expr GE expr 
-- On LPAREN reduce production expr -> expr GE expr 
-- On LE reduce production expr -> expr GE expr 
-- On IF reduce production expr -> expr GE expr 
-- On IDENT reduce production expr -> expr GE expr 
-- On GT reduce production expr -> expr GE expr 
-- On GE reduce production expr -> expr GE expr 
-- On EQ reduce production expr -> expr GE expr 
-- On ELSE reduce production expr -> expr GE expr 
-- On CONST_INT reduce production expr -> expr GE expr 
-- On CONST_BOOL reduce production expr -> expr GE expr 
-- On BEGIN reduce production expr -> expr GE expr 
-- On AND reduce production expr -> expr GE expr 

State 40:
expr -> expr EQ . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 41
-- On const shift to state 31

State 41:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr EQ expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LBRACKET shift to state 20
-- On DIV shift to state 29
-- On THEN reduce production expr -> expr EQ expr 
-- On SEMI reduce production expr -> expr EQ expr 
-- On RPAREN reduce production expr -> expr EQ expr 
-- On RBRACKET reduce production expr -> expr EQ expr 
-- On OR reduce production expr -> expr EQ expr 
-- On NOT reduce production expr -> expr EQ expr 
-- On NEQ reduce production expr -> expr EQ expr 
-- On LT reduce production expr -> expr EQ expr 
-- On LPAREN reduce production expr -> expr EQ expr 
-- On LE reduce production expr -> expr EQ expr 
-- On IF reduce production expr -> expr EQ expr 
-- On IDENT reduce production expr -> expr EQ expr 
-- On GT reduce production expr -> expr EQ expr 
-- On GE reduce production expr -> expr EQ expr 
-- On EQ reduce production expr -> expr EQ expr 
-- On ELSE reduce production expr -> expr EQ expr 
-- On CONST_INT reduce production expr -> expr EQ expr 
-- On CONST_BOOL reduce production expr -> expr EQ expr 
-- On BEGIN reduce production expr -> expr EQ expr 
-- On AND reduce production expr -> expr EQ expr 

State 42:
expr -> expr AND . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 43
-- On const shift to state 31

State 43:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr AND expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On THEN reduce production expr -> expr AND expr 
-- On SEMI reduce production expr -> expr AND expr 
-- On RPAREN reduce production expr -> expr AND expr 
-- On RBRACKET reduce production expr -> expr AND expr 
-- On OR reduce production expr -> expr AND expr 
-- On NOT reduce production expr -> expr AND expr 
-- On LPAREN reduce production expr -> expr AND expr 
-- On IF reduce production expr -> expr AND expr 
-- On IDENT reduce production expr -> expr AND expr 
-- On ELSE reduce production expr -> expr AND expr 
-- On CONST_INT reduce production expr -> expr AND expr 
-- On CONST_BOOL reduce production expr -> expr AND expr 
-- On BEGIN reduce production expr -> expr AND expr 
-- On AND reduce production expr -> expr AND expr 

State 44:
expr -> MINUS . expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr MINUS . expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 45
-- On const shift to state 31

State 45:
expr -> MINUS expr . [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . PLUS expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr MINUS expr . [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . EQ expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . NEQ expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42
-- On RPAREN reduce production expr -> MINUS expr 
-- On RPAREN reduce production expr -> expr MINUS expr 
-- On PLUS reduce production expr -> MINUS expr 
-- On PLUS reduce production expr -> expr MINUS expr 
-- On OR reduce production expr -> MINUS expr 
-- On OR reduce production expr -> expr MINUS expr 
-- On NOT reduce production expr -> MINUS expr 
-- On NOT reduce production expr -> expr MINUS expr 
-- On NEQ reduce production expr -> MINUS expr 
-- On NEQ reduce production expr -> expr MINUS expr 
-- On MINUS reduce production expr -> MINUS expr 
-- On MINUS reduce production expr -> expr MINUS expr 
-- On LT reduce production expr -> MINUS expr 
-- On LT reduce production expr -> expr MINUS expr 
-- On LPAREN reduce production expr -> MINUS expr 
-- On LPAREN reduce production expr -> expr MINUS expr 
-- On LE reduce production expr -> MINUS expr 
-- On LE reduce production expr -> expr MINUS expr 
-- On IF reduce production expr -> MINUS expr 
-- On IF reduce production expr -> expr MINUS expr 
-- On IDENT reduce production expr -> MINUS expr 
-- On IDENT reduce production expr -> expr MINUS expr 
-- On GT reduce production expr -> MINUS expr 
-- On GT reduce production expr -> expr MINUS expr 
-- On GE reduce production expr -> MINUS expr 
-- On GE reduce production expr -> expr MINUS expr 
-- On EQ reduce production expr -> MINUS expr 
-- On EQ reduce production expr -> expr MINUS expr 
-- On CONST_INT reduce production expr -> MINUS expr 
-- On CONST_INT reduce production expr -> expr MINUS expr 
-- On CONST_BOOL reduce production expr -> MINUS expr 
-- On CONST_BOOL reduce production expr -> expr MINUS expr 
-- On AND reduce production expr -> MINUS expr 
-- On AND reduce production expr -> expr MINUS expr 
** Conflict on RPAREN PLUS OR NOT NEQ MINUS LT LPAREN LE IF IDENT GT GE EQ CONST_INT CONST_BOOL AND

State 46:
expr -> LBRACKET . expr RBRACKET [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
field_expr -> expr LBRACKET . expr RBRACKET [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 47
-- On const shift to state 31

State 47:
expr -> expr . PLUS expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> LBRACKET expr . RBRACKET [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
field_expr -> expr LBRACKET expr . RBRACKET [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
-- On RBRACKET shift to state 48
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 48:
expr -> LBRACKET expr RBRACKET . [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
field_expr -> expr LBRACKET expr RBRACKET . [ RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND ]
-- On RPAREN reduce production expr -> LBRACKET expr RBRACKET 
-- On RPAREN reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On PLUS reduce production expr -> LBRACKET expr RBRACKET 
-- On PLUS reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On OR reduce production expr -> LBRACKET expr RBRACKET 
-- On OR reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On NOT reduce production expr -> LBRACKET expr RBRACKET 
-- On NOT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On NEQ reduce production expr -> LBRACKET expr RBRACKET 
-- On NEQ reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On MULT reduce production expr -> LBRACKET expr RBRACKET 
-- On MULT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On MINUS reduce production expr -> LBRACKET expr RBRACKET 
-- On MINUS reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On LT reduce production expr -> LBRACKET expr RBRACKET 
-- On LT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On LPAREN reduce production expr -> LBRACKET expr RBRACKET 
-- On LPAREN reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On LE reduce production expr -> LBRACKET expr RBRACKET 
-- On LE reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On LBRACKET reduce production expr -> LBRACKET expr RBRACKET 
-- On LBRACKET reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On IF reduce production expr -> LBRACKET expr RBRACKET 
-- On IF reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On IDENT reduce production expr -> LBRACKET expr RBRACKET 
-- On IDENT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On GT reduce production expr -> LBRACKET expr RBRACKET 
-- On GT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On GE reduce production expr -> LBRACKET expr RBRACKET 
-- On GE reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On EQ reduce production expr -> LBRACKET expr RBRACKET 
-- On EQ reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On DIV reduce production expr -> LBRACKET expr RBRACKET 
-- On DIV reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On CONST_INT reduce production expr -> LBRACKET expr RBRACKET 
-- On CONST_INT reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On CONST_BOOL reduce production expr -> LBRACKET expr RBRACKET 
-- On CONST_BOOL reduce production field_expr -> expr LBRACKET expr RBRACKET 
-- On AND reduce production expr -> LBRACKET expr RBRACKET 
-- On AND reduce production field_expr -> expr LBRACKET expr RBRACKET 
** Conflict on RPAREN PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ DIV CONST_INT CONST_BOOL AND

State 49:
list(expr) -> expr list(expr) . [ RPAREN ]
-- On RPAREN reduce production list(expr) -> expr list(expr) 

State 50:
expr -> expr . PLUS expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> IF expr . THEN expr ELSE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
-- On THEN shift to state 51
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 51:
expr -> IF expr THEN . expr ELSE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 52
-- On const shift to state 31

State 52:
expr -> expr . PLUS expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . MINUS expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . MULT expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . DIV expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . AND expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . OR expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . EQ expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . NEQ expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . LT expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . LE expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . GT expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> expr . GE expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
expr -> IF expr THEN expr . ELSE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ ELSE DIV AND ]
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On ELSE shift to state 53
-- On DIV shift to state 29
-- On AND shift to state 42

State 53:
expr -> IF expr THEN expr ELSE . expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 54
-- On const shift to state 31

State 54:
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> IF expr THEN expr ELSE expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42
-- On THEN reduce production expr -> IF expr THEN expr ELSE expr 
-- On SEMI reduce production expr -> IF expr THEN expr ELSE expr 
-- On RPAREN reduce production expr -> IF expr THEN expr ELSE expr 
-- On RBRACKET reduce production expr -> IF expr THEN expr ELSE expr 
-- On NOT reduce production expr -> IF expr THEN expr ELSE expr 
-- On LPAREN reduce production expr -> IF expr THEN expr ELSE expr 
-- On IF reduce production expr -> IF expr THEN expr ELSE expr 
-- On IDENT reduce production expr -> IF expr THEN expr ELSE expr 
-- On ELSE reduce production expr -> IF expr THEN expr ELSE expr 
-- On CONST_INT reduce production expr -> IF expr THEN expr ELSE expr 
-- On CONST_BOOL reduce production expr -> IF expr THEN expr ELSE expr 
-- On BEGIN reduce production expr -> IF expr THEN expr ELSE expr 

State 55:
expr -> expr . PLUS expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> LBRACKET expr . RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ RBRACKET PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
-- On RBRACKET shift to state 56
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 56:
expr -> LBRACKET expr RBRACKET . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On THEN reduce production expr -> LBRACKET expr RBRACKET 
-- On SEMI reduce production expr -> LBRACKET expr RBRACKET 
-- On RPAREN reduce production expr -> LBRACKET expr RBRACKET 
-- On RBRACKET reduce production expr -> LBRACKET expr RBRACKET 
-- On PLUS reduce production expr -> LBRACKET expr RBRACKET 
-- On OR reduce production expr -> LBRACKET expr RBRACKET 
-- On NOT reduce production expr -> LBRACKET expr RBRACKET 
-- On NEQ reduce production expr -> LBRACKET expr RBRACKET 
-- On MULT reduce production expr -> LBRACKET expr RBRACKET 
-- On MINUS reduce production expr -> LBRACKET expr RBRACKET 
-- On LT reduce production expr -> LBRACKET expr RBRACKET 
-- On LPAREN reduce production expr -> LBRACKET expr RBRACKET 
-- On LE reduce production expr -> LBRACKET expr RBRACKET 
-- On LBRACKET reduce production expr -> LBRACKET expr RBRACKET 
-- On IF reduce production expr -> LBRACKET expr RBRACKET 
-- On IDENT reduce production expr -> LBRACKET expr RBRACKET 
-- On GT reduce production expr -> LBRACKET expr RBRACKET 
-- On GE reduce production expr -> LBRACKET expr RBRACKET 
-- On EQ reduce production expr -> LBRACKET expr RBRACKET 
-- On ELSE reduce production expr -> LBRACKET expr RBRACKET 
-- On DIV reduce production expr -> LBRACKET expr RBRACKET 
-- On CONST_INT reduce production expr -> LBRACKET expr RBRACKET 
-- On CONST_BOOL reduce production expr -> LBRACKET expr RBRACKET 
-- On BEGIN reduce production expr -> LBRACKET expr RBRACKET 
-- On AND reduce production expr -> LBRACKET expr RBRACKET 

State 57:
expr -> LPAREN expr . RPAREN [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . PLUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ RPAREN PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
-- On RPAREN shift to state 58
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 58:
expr -> LPAREN expr RPAREN . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On THEN reduce production expr -> LPAREN expr RPAREN 
-- On SEMI reduce production expr -> LPAREN expr RPAREN 
-- On RPAREN reduce production expr -> LPAREN expr RPAREN 
-- On RBRACKET reduce production expr -> LPAREN expr RPAREN 
-- On PLUS reduce production expr -> LPAREN expr RPAREN 
-- On OR reduce production expr -> LPAREN expr RPAREN 
-- On NOT reduce production expr -> LPAREN expr RPAREN 
-- On NEQ reduce production expr -> LPAREN expr RPAREN 
-- On MULT reduce production expr -> LPAREN expr RPAREN 
-- On MINUS reduce production expr -> LPAREN expr RPAREN 
-- On LT reduce production expr -> LPAREN expr RPAREN 
-- On LPAREN reduce production expr -> LPAREN expr RPAREN 
-- On LE reduce production expr -> LPAREN expr RPAREN 
-- On LBRACKET reduce production expr -> LPAREN expr RPAREN 
-- On IF reduce production expr -> LPAREN expr RPAREN 
-- On IDENT reduce production expr -> LPAREN expr RPAREN 
-- On GT reduce production expr -> LPAREN expr RPAREN 
-- On GE reduce production expr -> LPAREN expr RPAREN 
-- On EQ reduce production expr -> LPAREN expr RPAREN 
-- On ELSE reduce production expr -> LPAREN expr RPAREN 
-- On DIV reduce production expr -> LPAREN expr RPAREN 
-- On CONST_INT reduce production expr -> LPAREN expr RPAREN 
-- On CONST_BOOL reduce production expr -> LPAREN expr RPAREN 
-- On BEGIN reduce production expr -> LPAREN expr RPAREN 
-- On AND reduce production expr -> LPAREN expr RPAREN 

State 59:
expr -> MINUS expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On MULT shift to state 18
-- On LBRACKET shift to state 20
-- On DIV shift to state 29
-- On THEN reduce production expr -> MINUS expr 
-- On SEMI reduce production expr -> MINUS expr 
-- On RPAREN reduce production expr -> MINUS expr 
-- On RBRACKET reduce production expr -> MINUS expr 
-- On PLUS reduce production expr -> MINUS expr 
-- On OR reduce production expr -> MINUS expr 
-- On NOT reduce production expr -> MINUS expr 
-- On NEQ reduce production expr -> MINUS expr 
-- On MINUS reduce production expr -> MINUS expr 
-- On LT reduce production expr -> MINUS expr 
-- On LPAREN reduce production expr -> MINUS expr 
-- On LE reduce production expr -> MINUS expr 
-- On IF reduce production expr -> MINUS expr 
-- On IDENT reduce production expr -> MINUS expr 
-- On GT reduce production expr -> MINUS expr 
-- On GE reduce production expr -> MINUS expr 
-- On EQ reduce production expr -> MINUS expr 
-- On ELSE reduce production expr -> MINUS expr 
-- On CONST_INT reduce production expr -> MINUS expr 
-- On CONST_BOOL reduce production expr -> MINUS expr 
-- On BEGIN reduce production expr -> MINUS expr 
-- On AND reduce production expr -> MINUS expr 

State 60:
expr -> NOT expr . [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . PLUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MINUS expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . MULT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . DIV expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . AND expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . OR expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . EQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . NEQ expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . LE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GT expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
expr -> expr . GE expr [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ THEN SEMI RPAREN RBRACKET PLUS OR NOT NEQ MULT MINUS LT LPAREN LE LBRACKET IF IDENT GT GE EQ ELSE DIV CONST_INT CONST_BOOL BEGIN AND ]
-- On PLUS shift to state 16
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On THEN reduce production expr -> NOT expr 
-- On SEMI reduce production expr -> NOT expr 
-- On RPAREN reduce production expr -> NOT expr 
-- On RBRACKET reduce production expr -> NOT expr 
-- On OR reduce production expr -> NOT expr 
-- On NOT reduce production expr -> NOT expr 
-- On LPAREN reduce production expr -> NOT expr 
-- On IF reduce production expr -> NOT expr 
-- On IDENT reduce production expr -> NOT expr 
-- On ELSE reduce production expr -> NOT expr 
-- On CONST_INT reduce production expr -> NOT expr 
-- On CONST_BOOL reduce production expr -> NOT expr 
-- On BEGIN reduce production expr -> NOT expr 
-- On AND reduce production expr -> NOT expr 

State 61:
expr -> expr . PLUS expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . MINUS expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . MULT expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . DIV expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . AND expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . OR expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . EQ expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . NEQ expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . LT expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . LE expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . GT expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
expr -> expr . GE expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV BEGIN AND ]
instr -> WHILE expr . block [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On BEGIN shift to state 62
-- On AND shift to state 42
-- On block shift to state 102

State 62:
block -> BEGIN . list(instr) END [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE shift to state 1
-- On VAR shift to state 63
-- On RETURN shift to state 66
-- On PRINT shift to state 69
-- On NOT shift to state 2
-- On NEWLINE shift to state 72
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 74
-- On FUN shift to state 82
-- On EXIT shift to state 90
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On BEGIN shift to state 62
-- On list(instr) shift to state 92
-- On instr shift to state 94
-- On field_expr shift to state 96
-- On expr shift to state 100
-- On const shift to state 31
-- On block shift to state 101
-- On END reduce production list(instr) -> 

State 63:
instr -> VAR . IDENT SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On IDENT shift to state 64

State 64:
instr -> VAR IDENT . SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 65

State 65:
instr -> VAR IDENT SEMI . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> VAR IDENT SEMI 
-- On VAR reduce production instr -> VAR IDENT SEMI 
-- On RETURN reduce production instr -> VAR IDENT SEMI 
-- On PRINT reduce production instr -> VAR IDENT SEMI 
-- On NOT reduce production instr -> VAR IDENT SEMI 
-- On NEWLINE reduce production instr -> VAR IDENT SEMI 
-- On MINUS reduce production instr -> VAR IDENT SEMI 
-- On LPAREN reduce production instr -> VAR IDENT SEMI 
-- On LBRACKET reduce production instr -> VAR IDENT SEMI 
-- On IF reduce production instr -> VAR IDENT SEMI 
-- On IDENT reduce production instr -> VAR IDENT SEMI 
-- On FUN reduce production instr -> VAR IDENT SEMI 
-- On EXIT reduce production instr -> VAR IDENT SEMI 
-- On EOF reduce production instr -> VAR IDENT SEMI 
-- On END reduce production instr -> VAR IDENT SEMI 
-- On CONST_INT reduce production instr -> VAR IDENT SEMI 
-- On CONST_BOOL reduce production instr -> VAR IDENT SEMI 
-- On BEGIN reduce production instr -> VAR IDENT SEMI 

State 66:
instr -> RETURN . expr SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 67
-- On const shift to state 31

State 67:
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> RETURN expr . SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 68
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 68:
instr -> RETURN expr SEMI . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> RETURN expr SEMI 
-- On VAR reduce production instr -> RETURN expr SEMI 
-- On RETURN reduce production instr -> RETURN expr SEMI 
-- On PRINT reduce production instr -> RETURN expr SEMI 
-- On NOT reduce production instr -> RETURN expr SEMI 
-- On NEWLINE reduce production instr -> RETURN expr SEMI 
-- On MINUS reduce production instr -> RETURN expr SEMI 
-- On LPAREN reduce production instr -> RETURN expr SEMI 
-- On LBRACKET reduce production instr -> RETURN expr SEMI 
-- On IF reduce production instr -> RETURN expr SEMI 
-- On IDENT reduce production instr -> RETURN expr SEMI 
-- On FUN reduce production instr -> RETURN expr SEMI 
-- On EXIT reduce production instr -> RETURN expr SEMI 
-- On EOF reduce production instr -> RETURN expr SEMI 
-- On END reduce production instr -> RETURN expr SEMI 
-- On CONST_INT reduce production instr -> RETURN expr SEMI 
-- On CONST_BOOL reduce production instr -> RETURN expr SEMI 
-- On BEGIN reduce production instr -> RETURN expr SEMI 

State 69:
instr -> PRINT . expr SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 70
-- On const shift to state 31

State 70:
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> PRINT expr . SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 71
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 71:
instr -> PRINT expr SEMI . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> PRINT expr SEMI 
-- On VAR reduce production instr -> PRINT expr SEMI 
-- On RETURN reduce production instr -> PRINT expr SEMI 
-- On PRINT reduce production instr -> PRINT expr SEMI 
-- On NOT reduce production instr -> PRINT expr SEMI 
-- On NEWLINE reduce production instr -> PRINT expr SEMI 
-- On MINUS reduce production instr -> PRINT expr SEMI 
-- On LPAREN reduce production instr -> PRINT expr SEMI 
-- On LBRACKET reduce production instr -> PRINT expr SEMI 
-- On IF reduce production instr -> PRINT expr SEMI 
-- On IDENT reduce production instr -> PRINT expr SEMI 
-- On FUN reduce production instr -> PRINT expr SEMI 
-- On EXIT reduce production instr -> PRINT expr SEMI 
-- On EOF reduce production instr -> PRINT expr SEMI 
-- On END reduce production instr -> PRINT expr SEMI 
-- On CONST_INT reduce production instr -> PRINT expr SEMI 
-- On CONST_BOOL reduce production instr -> PRINT expr SEMI 
-- On BEGIN reduce production instr -> PRINT expr SEMI 

State 72:
instr -> NEWLINE . SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 73

State 73:
instr -> NEWLINE SEMI . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> NEWLINE SEMI 
-- On VAR reduce production instr -> NEWLINE SEMI 
-- On RETURN reduce production instr -> NEWLINE SEMI 
-- On PRINT reduce production instr -> NEWLINE SEMI 
-- On NOT reduce production instr -> NEWLINE SEMI 
-- On NEWLINE reduce production instr -> NEWLINE SEMI 
-- On MINUS reduce production instr -> NEWLINE SEMI 
-- On LPAREN reduce production instr -> NEWLINE SEMI 
-- On LBRACKET reduce production instr -> NEWLINE SEMI 
-- On IF reduce production instr -> NEWLINE SEMI 
-- On IDENT reduce production instr -> NEWLINE SEMI 
-- On FUN reduce production instr -> NEWLINE SEMI 
-- On EXIT reduce production instr -> NEWLINE SEMI 
-- On EOF reduce production instr -> NEWLINE SEMI 
-- On END reduce production instr -> NEWLINE SEMI 
-- On CONST_INT reduce production instr -> NEWLINE SEMI 
-- On CONST_BOOL reduce production instr -> NEWLINE SEMI 
-- On BEGIN reduce production instr -> NEWLINE SEMI 

State 74:
expr -> IDENT . [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> IDENT . LPAREN list(expr) RPAREN SEMI [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> IDENT . ASSIGN expr SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
instr -> IDENT . LPAREN list(expr) RPAREN SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On LPAREN shift to state 75
-- On ASSIGN shift to state 79
-- On PLUS reduce production expr -> IDENT 
-- On OR reduce production expr -> IDENT 
-- On NEQ reduce production expr -> IDENT 
-- On MULT reduce production expr -> IDENT 
-- On MINUS reduce production expr -> IDENT 
-- On LT reduce production expr -> IDENT 
-- On LE reduce production expr -> IDENT 
-- On LBRACKET reduce production expr -> IDENT 
-- On GT reduce production expr -> IDENT 
-- On GE reduce production expr -> IDENT 
-- On EQ reduce production expr -> IDENT 
-- On DIV reduce production expr -> IDENT 
-- On AND reduce production expr -> IDENT 

State 75:
expr -> IDENT LPAREN . list(expr) RPAREN SEMI [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> IDENT LPAREN . list(expr) RPAREN SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On list(expr) shift to state 76
-- On field_expr shift to state 14
-- On expr shift to state 15
-- On const shift to state 31
-- On RPAREN reduce production list(expr) -> 

State 76:
expr -> IDENT LPAREN list(expr) . RPAREN SEMI [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> IDENT LPAREN list(expr) . RPAREN SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On RPAREN shift to state 77

State 77:
expr -> IDENT LPAREN list(expr) RPAREN . SEMI [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> IDENT LPAREN list(expr) RPAREN . SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 78

State 78:
expr -> IDENT LPAREN list(expr) RPAREN SEMI . [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> IDENT LPAREN list(expr) RPAREN SEMI . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On VAR reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On RETURN reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On PRINT reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On PLUS reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On OR reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On NOT reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On NEWLINE reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On NEQ reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On MULT reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On MINUS reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On MINUS reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On LT reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On LPAREN reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On LE reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On LBRACKET reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On LBRACKET reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On IF reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On IDENT reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On GT reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On GE reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On FUN reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On EXIT reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On EQ reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On EOF reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On END reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On DIV reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On CONST_INT reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On CONST_BOOL reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On BEGIN reduce production instr -> IDENT LPAREN list(expr) RPAREN SEMI 
-- On AND reduce production expr -> IDENT LPAREN list(expr) RPAREN SEMI 
** Conflict on MINUS LBRACKET

State 79:
instr -> IDENT ASSIGN . expr SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 80
-- On const shift to state 31

State 80:
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> IDENT ASSIGN expr . SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 81
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 81:
instr -> IDENT ASSIGN expr SEMI . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> IDENT ASSIGN expr SEMI 
-- On VAR reduce production instr -> IDENT ASSIGN expr SEMI 
-- On RETURN reduce production instr -> IDENT ASSIGN expr SEMI 
-- On PRINT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On NOT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On NEWLINE reduce production instr -> IDENT ASSIGN expr SEMI 
-- On MINUS reduce production instr -> IDENT ASSIGN expr SEMI 
-- On LPAREN reduce production instr -> IDENT ASSIGN expr SEMI 
-- On LBRACKET reduce production instr -> IDENT ASSIGN expr SEMI 
-- On IF reduce production instr -> IDENT ASSIGN expr SEMI 
-- On IDENT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On FUN reduce production instr -> IDENT ASSIGN expr SEMI 
-- On EXIT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On EOF reduce production instr -> IDENT ASSIGN expr SEMI 
-- On END reduce production instr -> IDENT ASSIGN expr SEMI 
-- On CONST_INT reduce production instr -> IDENT ASSIGN expr SEMI 
-- On CONST_BOOL reduce production instr -> IDENT ASSIGN expr SEMI 
-- On BEGIN reduce production instr -> IDENT ASSIGN expr SEMI 

State 82:
instr -> FUN . IDENT LPAREN list(IDENT) RPAREN block [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On IDENT shift to state 83

State 83:
instr -> FUN IDENT . LPAREN list(IDENT) RPAREN block [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On LPAREN shift to state 84

State 84:
instr -> FUN IDENT LPAREN . list(IDENT) RPAREN block [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On IDENT shift to state 85
-- On list(IDENT) shift to state 87
-- On RPAREN reduce production list(IDENT) -> 

State 85:
list(IDENT) -> IDENT . list(IDENT) [ RPAREN ]
-- On IDENT shift to state 85
-- On list(IDENT) shift to state 86
-- On RPAREN reduce production list(IDENT) -> 

State 86:
list(IDENT) -> IDENT list(IDENT) . [ RPAREN ]
-- On RPAREN reduce production list(IDENT) -> IDENT list(IDENT) 

State 87:
instr -> FUN IDENT LPAREN list(IDENT) . RPAREN block [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On RPAREN shift to state 88

State 88:
instr -> FUN IDENT LPAREN list(IDENT) RPAREN . block [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On BEGIN shift to state 62
-- On block shift to state 89

State 89:
instr -> FUN IDENT LPAREN list(IDENT) RPAREN block . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On VAR reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On RETURN reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On PRINT reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On NOT reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On NEWLINE reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On MINUS reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On LPAREN reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On LBRACKET reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On IF reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On IDENT reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On FUN reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On EXIT reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On EOF reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On END reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On CONST_INT reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On CONST_BOOL reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 
-- On BEGIN reduce production instr -> FUN IDENT LPAREN list(IDENT) RPAREN block 

State 90:
instr -> EXIT . SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 91

State 91:
instr -> EXIT SEMI . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> EXIT SEMI 
-- On VAR reduce production instr -> EXIT SEMI 
-- On RETURN reduce production instr -> EXIT SEMI 
-- On PRINT reduce production instr -> EXIT SEMI 
-- On NOT reduce production instr -> EXIT SEMI 
-- On NEWLINE reduce production instr -> EXIT SEMI 
-- On MINUS reduce production instr -> EXIT SEMI 
-- On LPAREN reduce production instr -> EXIT SEMI 
-- On LBRACKET reduce production instr -> EXIT SEMI 
-- On IF reduce production instr -> EXIT SEMI 
-- On IDENT reduce production instr -> EXIT SEMI 
-- On FUN reduce production instr -> EXIT SEMI 
-- On EXIT reduce production instr -> EXIT SEMI 
-- On EOF reduce production instr -> EXIT SEMI 
-- On END reduce production instr -> EXIT SEMI 
-- On CONST_INT reduce production instr -> EXIT SEMI 
-- On CONST_BOOL reduce production instr -> EXIT SEMI 
-- On BEGIN reduce production instr -> EXIT SEMI 

State 92:
block -> BEGIN list(instr) . END [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On END shift to state 93

State 93:
block -> BEGIN list(instr) END . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production block -> BEGIN list(instr) END 
-- On VAR reduce production block -> BEGIN list(instr) END 
-- On RETURN reduce production block -> BEGIN list(instr) END 
-- On PRINT reduce production block -> BEGIN list(instr) END 
-- On NOT reduce production block -> BEGIN list(instr) END 
-- On NEWLINE reduce production block -> BEGIN list(instr) END 
-- On MINUS reduce production block -> BEGIN list(instr) END 
-- On LPAREN reduce production block -> BEGIN list(instr) END 
-- On LBRACKET reduce production block -> BEGIN list(instr) END 
-- On IF reduce production block -> BEGIN list(instr) END 
-- On IDENT reduce production block -> BEGIN list(instr) END 
-- On FUN reduce production block -> BEGIN list(instr) END 
-- On EXIT reduce production block -> BEGIN list(instr) END 
-- On EOF reduce production block -> BEGIN list(instr) END 
-- On END reduce production block -> BEGIN list(instr) END 
-- On CONST_INT reduce production block -> BEGIN list(instr) END 
-- On CONST_BOOL reduce production block -> BEGIN list(instr) END 
-- On BEGIN reduce production block -> BEGIN list(instr) END 

State 94:
list(instr) -> instr . list(instr) [ EOF END ]
-- On WHILE shift to state 1
-- On VAR shift to state 63
-- On RETURN shift to state 66
-- On PRINT shift to state 69
-- On NOT shift to state 2
-- On NEWLINE shift to state 72
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 74
-- On FUN shift to state 82
-- On EXIT shift to state 90
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On BEGIN shift to state 62
-- On list(instr) shift to state 95
-- On instr shift to state 94
-- On field_expr shift to state 96
-- On expr shift to state 100
-- On const shift to state 31
-- On block shift to state 101
-- On EOF reduce production list(instr) -> 
-- On END reduce production list(instr) -> 

State 95:
list(instr) -> instr list(instr) . [ EOF END ]
-- On EOF reduce production list(instr) -> instr list(instr) 
-- On END reduce production list(instr) -> instr list(instr) 

State 96:
expr -> field_expr . [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> field_expr . ASSIGN expr SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On ASSIGN shift to state 97
-- On PLUS reduce production expr -> field_expr 
-- On OR reduce production expr -> field_expr 
-- On NEQ reduce production expr -> field_expr 
-- On MULT reduce production expr -> field_expr 
-- On MINUS reduce production expr -> field_expr 
-- On LT reduce production expr -> field_expr 
-- On LE reduce production expr -> field_expr 
-- On LBRACKET reduce production expr -> field_expr 
-- On GT reduce production expr -> field_expr 
-- On GE reduce production expr -> field_expr 
-- On EQ reduce production expr -> field_expr 
-- On DIV reduce production expr -> field_expr 
-- On AND reduce production expr -> field_expr 

State 97:
instr -> field_expr ASSIGN . expr SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On NOT shift to state 2
-- On MINUS shift to state 3
-- On LPAREN shift to state 4
-- On LBRACKET shift to state 5
-- On IF shift to state 6
-- On IDENT shift to state 7
-- On CONST_INT shift to state 9
-- On CONST_BOOL shift to state 10
-- On field_expr shift to state 14
-- On expr shift to state 98
-- On const shift to state 31

State 98:
expr -> expr . PLUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ SEMI PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
instr -> field_expr ASSIGN expr . SEMI [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On SEMI shift to state 99
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 99:
instr -> field_expr ASSIGN expr SEMI . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> field_expr ASSIGN expr SEMI 
-- On VAR reduce production instr -> field_expr ASSIGN expr SEMI 
-- On RETURN reduce production instr -> field_expr ASSIGN expr SEMI 
-- On PRINT reduce production instr -> field_expr ASSIGN expr SEMI 
-- On NOT reduce production instr -> field_expr ASSIGN expr SEMI 
-- On NEWLINE reduce production instr -> field_expr ASSIGN expr SEMI 
-- On MINUS reduce production instr -> field_expr ASSIGN expr SEMI 
-- On LPAREN reduce production instr -> field_expr ASSIGN expr SEMI 
-- On LBRACKET reduce production instr -> field_expr ASSIGN expr SEMI 
-- On IF reduce production instr -> field_expr ASSIGN expr SEMI 
-- On IDENT reduce production instr -> field_expr ASSIGN expr SEMI 
-- On FUN reduce production instr -> field_expr ASSIGN expr SEMI 
-- On EXIT reduce production instr -> field_expr ASSIGN expr SEMI 
-- On EOF reduce production instr -> field_expr ASSIGN expr SEMI 
-- On END reduce production instr -> field_expr ASSIGN expr SEMI 
-- On CONST_INT reduce production instr -> field_expr ASSIGN expr SEMI 
-- On CONST_BOOL reduce production instr -> field_expr ASSIGN expr SEMI 
-- On BEGIN reduce production instr -> field_expr ASSIGN expr SEMI 

State 100:
expr -> expr . PLUS expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MINUS expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . MULT expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . DIV expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . AND expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . OR expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . EQ expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . NEQ expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LT expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . LE expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GT expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
expr -> expr . GE expr [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV AND ]
field_expr -> expr . LBRACKET expr RBRACKET [ PLUS OR NEQ MULT MINUS LT LE LBRACKET GT GE EQ DIV ASSIGN AND ]
-- On PLUS shift to state 16
-- On OR shift to state 23
-- On NEQ shift to state 25
-- On MULT shift to state 18
-- On MINUS shift to state 27
-- On LT shift to state 32
-- On LE shift to state 34
-- On LBRACKET shift to state 20
-- On GT shift to state 36
-- On GE shift to state 38
-- On EQ shift to state 40
-- On DIV shift to state 29
-- On AND shift to state 42

State 101:
instr -> block . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> block 
-- On VAR reduce production instr -> block 
-- On RETURN reduce production instr -> block 
-- On PRINT reduce production instr -> block 
-- On NOT reduce production instr -> block 
-- On NEWLINE reduce production instr -> block 
-- On MINUS reduce production instr -> block 
-- On LPAREN reduce production instr -> block 
-- On LBRACKET reduce production instr -> block 
-- On IF reduce production instr -> block 
-- On IDENT reduce production instr -> block 
-- On FUN reduce production instr -> block 
-- On EXIT reduce production instr -> block 
-- On EOF reduce production instr -> block 
-- On END reduce production instr -> block 
-- On CONST_INT reduce production instr -> block 
-- On CONST_BOOL reduce production instr -> block 
-- On BEGIN reduce production instr -> block 

State 102:
instr -> WHILE expr block . [ WHILE VAR RETURN PRINT NOT NEWLINE MINUS LPAREN LBRACKET IF IDENT FUN EXIT EOF END CONST_INT CONST_BOOL BEGIN ]
-- On WHILE reduce production instr -> WHILE expr block 
-- On VAR reduce production instr -> WHILE expr block 
-- On RETURN reduce production instr -> WHILE expr block 
-- On PRINT reduce production instr -> WHILE expr block 
-- On NOT reduce production instr -> WHILE expr block 
-- On NEWLINE reduce production instr -> WHILE expr block 
-- On MINUS reduce production instr -> WHILE expr block 
-- On LPAREN reduce production instr -> WHILE expr block 
-- On LBRACKET reduce production instr -> WHILE expr block 
-- On IF reduce production instr -> WHILE expr block 
-- On IDENT reduce production instr -> WHILE expr block 
-- On FUN reduce production instr -> WHILE expr block 
-- On EXIT reduce production instr -> WHILE expr block 
-- On EOF reduce production instr -> WHILE expr block 
-- On END reduce production instr -> WHILE expr block 
-- On CONST_INT reduce production instr -> WHILE expr block 
-- On CONST_BOOL reduce production instr -> WHILE expr block 
-- On BEGIN reduce production instr -> WHILE expr block 

State 103:
prog' -> prog . [ # ]
-- On # accept prog

State 104:
prog -> list(instr) . EOF [ # ]
-- On EOF shift to state 105

State 105:
prog -> list(instr) EOF . [ # ]
-- On # reduce production prog -> list(instr) EOF 

